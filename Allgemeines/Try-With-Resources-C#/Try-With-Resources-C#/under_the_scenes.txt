using (ResourceFirst resourceOne = new ResourceFirst())
using (ResourceSecond resourceTwo = new ResourceSecond())
{
	resourceTwo.DoSomething();
	resourceOne.DoSomething();
}


using statement under the scenes:

The UnhandledException event handles uncaught exceptions thrown from the main UI thread.
The ThreadException event handles uncaught exceptions thrown from non-UI threads.
Application.ThreadException;
AppDomain.CurrentDomain.UnhandledException;

try {
	// AppDomain
	Program();
}
catch(Exception e)
{
	AppDomain.CurrentDomain.UnhandledException = e;
}

if (AppDomain.CurrentDomain.UnhandledException != null)
{
	Console.WriteLine("[ERROR] FATAL UNHANDLED EXCEPTION: {0}", e.ToString());
}



Program()
{
	ResourceFirst resourceOne = new ResourceFirst()
	try{
		ResourceSecond resourceSecond = new ResourceSecond()	
		resourceOne.DoSomething();
		resourceSecond.DoSomehting();
	}
	// When debuggin this catch exists. Does it exist when running without debug?
	// I guess, it will not exist but not sure.
	catch(Exception e)
	{
		Console.WriteLine("Unhandled Exception:");
		Console.WriteLine(e.ToString());
		throw e;
	}
	finally
	{
		if (resourceSecond != null)
		{
			try {
				resourceSecond.Dispose();
			}
			// When debuggin this catch exists. Does it exist when running without debug?
			// I guess, it will not exist but not sure.
			catch(Exception e)
			{
				Console.WriteLine("Unhandled Exception:");
				Console.WriteLine(e.ToString());
				throw e;
			}
			finally
			{
				resourceOne.Dispose();
			}
		}
		else
		{
			try {
				resourceOne.Dispose();
			}
			// When debuggin this catch exists. Does it exist when running without debug?
			// I guess, it will not exist but not sure.
			catch(Exception e)
			{
				Console.WriteLine("Unhandled Exception:");
				Console.WriteLine(e.ToString());
				throw e;
			}
		}
	}
}

IMHO the best way to close resources is by means of the using statement. In this way you close always the resources even
if there are exceptions. Besides we do not have to write loads of code to achieve it.


The old way:

MyResourceOne resourceOne;
MyResourceTwo resourceTwo;
try
{

}
finally
{
    if (resourceOne != null)
    {
        resourceOne.Dispose();
    }

    if (resourceTwo != null)
    {
        resourceTwo.Dispose();
    }
}

The problem with this way is, if resourceOne.Dispose() throws exception I am not going to call resourceTwo.Dispose() :(

BUT IF YOU WANT TO DO IT RIGHT (or at least as I think it is right) YOU MUST WRITE LOADS OF CODE, SO AT THE END IF YOU DO NOT USE
THE using statement THIS IS THE "BEST" SOLUTION (even if it is not perfect) BUT ALL DEPENDS ON YOUR CASE. With using statement you will
never have doubts :)  SO ALWAYS USE THE using statement (AFAIU)
